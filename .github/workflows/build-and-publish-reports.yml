name: Build and publish compliance reports
on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 6" # Run at 00:00 on every saturday
  push:
    branches:
      - master
      - main
  pull_request:
    branches: [ main ]
jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - uses: ipfs/aegir/actions/cache-node-modules@master
  pinata-compliance-checks:
    runs-on: ubuntu-latest
    needs: [checkout]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npm run dev-start -- -s ${{ secrets.PINATA_API_ENDPOINT }} ${{secrets.PINATA_API_TOKEN}}
  estuary-compliance-checks:
    runs-on: ubuntu-latest
    needs: [checkout]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npm run dev-start -- -s ${{ secrets.ESTUARY_API_ENDPOINT }} ${{secrets.ESTUARY_API_TOKEN}}
  nft-compliance-checks:
    runs-on: ubuntu-latest
    needs: [checkout]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npm run dev-start -- -s ${{ secrets.NFT_API_ENDPOINT }} ${{secrets.NFT_API_TOKEN}}
  web3-compliance-checks:
    runs-on: ubuntu-latest
    needs: [checkout]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npm run dev-start -- -s ${{ secrets.WEB3_API_ENDPOINT }} ${{secrets.WEB3_API_TOKEN}}

  # Deploy to gh pages branch

  ## Cron jobs
  deploy-from-schedule:
    if: success() && (github.event.schedule != null || github.event.pusher != null)
    runs-on: ubuntu-latest
    needs: [pinata-compliance-checks, estuary-compliance-checks, nft-compliance-checks, web3-compliance-checks]
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    steps:
      - name: Scheduled deployment
        uses: s0/git-publish-subdir-action@399aab378450f99b7de6767f62b0d1dbfcb58b53
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ## PRs should push to branch other than primary `gh-pages` branch
  deploy-from-PR:
    if: success() && github.event.pull_request != null
    runs-on: ubuntu-latest
    needs: [pinata-compliance-checks, estuary-compliance-checks, nft-compliance-checks, web3-compliance-checks]
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    steps:
      - name: Create branch for PR
        uses: peterjgrainger/action-create-branch@v2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: gh-pages-${{ github.event.pull_request.head.sha }}
          sha: '${{ github.event.pull_request.head.sha }}'
      - name: Deployment for PR
        uses: s0/git-publish-subdir-action@399aab378450f99b7de6767f62b0d1dbfcb58b53
        env:
          REPO: self
          BRANCH: gh-pages-${{ github.event.pull_request.head.sha }}
          FOLDER: docs
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
